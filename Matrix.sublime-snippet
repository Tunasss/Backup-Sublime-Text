<snippet>
  <content><![CDATA[

const ll N = 111;
 
ll n;

struct Matrix {

int rowSize = N - 1;
int columnSize = N - 1;
int m[N][N] = {};

Matrix operator * (Matrix b) {
    Matrix C;
    for (int i = 1; i <= rowSize; ++i) {
        for (int j = 1; j <= b.columnSize; ++j) {
            C.m[i][j] = 0;
            for (int k = 1; k <= columnSize; ++k) {
                C.m[i][j] = (C.m[i][j] + 1LL * m[i][k] * b.m[k][j] % MOD) % MOD;
            }
        }
    }
    C.rowSize = rowSize;
    C.columnSize = b.columnSize;
    return C;
}

};
 
Matrix Pow(Matrix a, ll n) {
    if (n == 1) return a;
    if (n & 1) return Pow(a,n - 1) * a;
    Matrix tmp = Pow(a, n / 2);
    return tmp * tmp;
}

void print(Matrix X){
    cout << "+-";
    FOR(i,1,X.columnSize) cout << " - ";
    cout << "-+\n";

    for (int i = 1; i <= X.rowSize; ++i) {
        cout << "|  ";
        for (int j = 1; j <= X.columnSize; ++j) {
         cout << X.m[i][j] << "  ";
        }
        cout << "|\n";
    }
    
    cout << "+-";
    FOR(i,1,X.columnSize) cout << " - ";
    cout << "-+\n";
}

signed main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);
    //freopen(file".INP","r",stdin);
    //freopen(file".OUT","w",stdout);
    
    Matrix base, D;

    D.rowSize = ;
    D.columnSize = ;

    // print(D);

    base.rowSize = ;
    base.columnSize = ;

    // print(base);
    
    return 0;
}

]]></content>
  <tabTrigger>mt</tabTrigger>
  <description>Matrix Template</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>