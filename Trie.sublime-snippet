<snippet>
  <content><![CDATA[

#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef string str;
typedef pair <int,int> ii;
#define file "TEST"
#define st first
#define nd second
#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define er equal_range
#define bin binary_search
#define vll vector<ll>
#define vi vector<int>
#define all(v) (v).begin(), (v).end()
#define FOR(i,x,y) for(ll i = x; i <= y; ++i)
#define FOS(i,x,y) for(ll i = x; i >= y; --i)
#define EACH(i,x) for (auto &(i) : (x))
#define el cout << '\n';
const ll MOD = 1e9 + 7;
#define dbg(...) cerr << "[" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "]  "
#define dbge(...) cerr << "[" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "]" << endl;
mt19937_64 rd(chrono::steady_clock::now().time_since_epoch().count());
ll rand(ll l, ll r) { return uniform_int_distribution<ll>(l, r)(rd); }

const ll N = 1e5 + 5;
const ll C = 265;

struct Node{
    Node* tree[C];
    bool end;
};

Node* newNode(){
    Node* N = new Node;
    FOR(i,0,256){
        N -> tree[i] = nullptr;
    }
    N -> end = false;
    return N;
}

void insert (Node* root, str s){
    Node* v = root;
    FOR(i,0,s.size() - 1){
        if (v -> tree[s[i]]){
            v -> tree[s[i]] = newNode();
        }
        v = v -> tree[s[i]];
    }
    v -> end = true;
}

bool find (Node* root, str s){
    Node* v = root;
    FOR(i,0,s.size() - 1){
        if (!v -> tree[s[i]]){
            return false;
        }
        if (v -> end){
            return true;
        }
    }
    return true;
}

signed main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);
    //freopen(file".INP","r",stdin);
    //freopen(file".OUT","w",stdout);
    
    Node *root = newNode();
    bool flag = 1;

    str a = "abcd";
    insert(root,a);

    str b = "abc";
    flag = find(root,b);

    cout << (flag ? "YES": "NO");
    el;

    return 0;
}


]]></content>
  <tabTrigger>trie</tabTrigger>
  <description>Trie Template</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>